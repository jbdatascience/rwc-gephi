import csv

# Take a CSV file in the form 'TeamA, TeamB, ScoreA, ScoreB, TriesA, TriesB' and
# create a GDF representation for use with Gephi
def convert_csv_gdf(csv_filename, gdf_filename='output.gdf'):
	# Put result data from CSV files into 2D arrays for processing
	fixtures = []
	scores = []
	tries = []

	with open(csv_filename) as csv_file:
		reader = csv.DictReader(csv_file)
		for row in reader:
			fixtures.append([row['TeamA'], row['TeamB']])
			scores.append([row['ScoreA'], row['ScoreB']])
			tries.append([row['TriesA'], row['TriesB']])

	# Construct node section of GDF file
	nodes = get_nodes(fixtures, scores, tries)
	node_info = 'nodedef>name VARCHAR,label VARCHAR,totalscore INTEGER,totaltries INTEGER\n'
	for node in nodes:
		node_info += node[0] + ',' + node[0] + ',' + str(node[1]) + ',' + str(node[2]) + '\n'

	# Construct edge section of GDF file
	edges = get_edges(fixtures)
	edge_info = 'edgedef>node1 VARCHAR,node2 VARCHAR,directed BOOLEAN,weight DOUBLE\n'
	for edge in edges:
		edge_info += edge[0] + ',' + edge[1] + ',' + 'false' + ',' + str(edge[2]) + '\n'

		gdf_file = open(gdf_filename, 'w')
		gdf_file.write(node_info)
		gdf_file.write(edge_info)
		gdf_file.close()


# Get all information required for nodes (teams) including total tries and scores
def get_nodes(fixtures, scores, tries):
	teams = set()
	nodes = []

	# Obtain set of teams
	for team in fixtures:
		teams.add(team[0])
		teams.add(team[1])	

	# Loop through set, and calculate totals then add to node list 
	for team in teams:
		total_score = 0; 
		total_tries = 0; 
		for idx, item in enumerate(fixtures):
			# Check if team is LHS of fixture
			if team == item[0]:
				total_score += int(scores[idx][0])
				total_tries += int(tries[idx][0])

			# Check if team is RHS of fixture
			elif team == item[1]:
				total_score += int(scores[idx][1])
				total_tries += int(tries[idx][1])

			else:
				continue
		# Add team, total score, and total tries to node array
		nodes.append([team, total_score, total_tries])


		return nodes

# Get all unique fixtures as edges and calculate weight based on number of fixtures between teams 
def get_edges(fixtures):
	unique_fixtures = set()
	edges = []

	# Join fixture elements i.e. teams to 1 string to make use of set
	for fixture in fixtures:
		unique_fixtures.add(' '.join(fixture))

	# Count occurences of unique fixtures from fixture list
	for unique in unique_fixtures:
		weight = 0
		for fixture in fixtures: 
			if unique == ' '.join(fixture):
				weight += 1

		# Re-split the fixture elements and add them and the corresponding weight to the edges array
		edge_nodes = unique.split(' ')
		edges.append([edge_nodes[0], edge_nodes[1], weight])

		return edges


# Example usage - assuming example file 'test.csv' generated by get_rugby_data.py
# convert_csv_gdf('test.csv', 'test.gdf')




